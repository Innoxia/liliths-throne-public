<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<item>
	<coreAttributes>
		<value>250</value> 
		<determiner><![CDATA[a bag of]]></determiner>
		<name><![CDATA[Bone Crunchers]]></name>
		<namePlural pluralByDefault="false"><![CDATA[Bone Crunchers]]></namePlural>
		<description><![CDATA[A brown paper bag, containing half a dozen pieces of roasted bone. Although the juicy marrow is all that most normal people would eat, an image on the back of the bag shows a buff hyena-girl using her strong jaws to crunch and swallow every last piece of them.]]></description> 
		
		<useDescriptor>eat</useDescriptor>
		
		<sexUse>true</sexUse>
		<combatUseAllies>true</combatUseAllies>
		<combatUseEnemies>false</combatUseEnemies>
		<consumedOnUse>true</consumedOnUse>
		
		<rarity>RARE</rarity> 
		
		<!-- instead of defining a simple path name for your image, you can use the layering system as shown here.
		Each of the svg images you define here will be rendered on top of or beneath the others, based on the zLayer attribute defined for it.
			zLayers of a higher value will be rendered on top of lower zLayers.
		'imageRotation' and 'imageSize' affect the image's rotation and size, respectively.
			You should define imageRotation in degrees, from 0 to 360.
			You should define imageSize as a percentage, from 1 to 100.
		Text inside of the svg image can be replaced at time of rendering, via the target/replacement attributes.
			You can define any number of target/replacement pairs, but they must follow the naming convention: 'targetX' 'replacementX', where X is the number of the replacement pair, starting at 1.
			The contents of the 'targetX' attribute will be searched for in the svg file and replaced with the contents of the corresponding 'replacementX' attribute.
			In this example, I use the target/replacement pairs to recolour all edge strokes of colour #000 with the colour #ff5555 (which effectively removes the black edges of the icon.svg by recolouring it to the same colour as the interior.)
			I also replace all instances of the colour '#ff8080' with 'ff5555'. While this isn't necessary for the hyena icon, it's designed to remove the lighter shade from an icon and replace it with the same 'ff5555' colour as the rest of the icon so as to make it a uniform colour for the item's background icon.
		So, with the 4 imageName elements defined below, I'm:
			1) Rendering the bottom background.
			2) Recolouring an rendering the hyena race icon on top of that.
			3) Rendering the item icon on top of those two.
			4) Finally, rendering the highlights of the background on top of everything. -->
		<imageName zLayer="0" imageRotation="0" imageSize="100">background_bottom.svg</imageName>
		<imageName zLayer="1" imageRotation="0" imageSize="70" target1='stroke="#000"' replacement1='stroke="#ff5555"' target2='#ff8080' replacement2='#ff5555'>res/mods/innoxia/race/hyena/subspecies/icon.svg</imageName>
		<imageName zLayer="2" imageRotation="0" imageSize="70">hyena_bone_crunchers.svg</imageName>
		<imageName zLayer="3" imageRotation="0" imageSize="100">background_top.svg</imageName>
		
		<colourPrimary>innoxia_hyena</colourPrimary>
		<colourSecondary/>
		<colourTertiary/>
		
		<potionDescriptor><![CDATA[hyena]]></potionDescriptor>
		<associatedRace>innoxia_hyena</associatedRace>
		<enchantmentItemTypeId>ELIXIR</enchantmentItemTypeId>
		<enchantmentEffectId>RACE</enchantmentEffectId>
		
		<effectTooltipLines>
			<line><![CDATA[[style.boldGood(Restores)] 10% [style.boldHealth([#ATTRIBUTE_HEALTH_MAXIMUM.getName()])]]]></line>
			<line><![CDATA[[#ATTRIBUTE_MAJOR_PHYSIQUE.getFormattedValue(2)] to 'potion effects']]></line>
		</effectTooltipLines>
		
		<applyEffects><![CDATA[
			[##npc.incrementHealth(npc.getAttributeValue(ATTRIBUTE_HEALTH_MAXIMUM)/10)]
			
			<p style='margin-bottom:0; padding-bottom:0;'>
				[npc.Name] [npc.verb(start)] to feel stronger...
			</p>
			[#npc.addPotionEffect(ATTRIBUTE_MAJOR_PHYSIQUE, 2)]
		]]></applyEffects>
		
		<itemTags>
			<tag>RACIAL_TF_ITEM</tag>
			<tag>SOLD_BY_RALPH</tag>
		</itemTags>
	</coreAttributes>

	<useDescriptions>
		<selfUse><![CDATA[
		[npc.Name] [npc.verb(open)] the top of the brown paper bag and [npc.verb(breathe)] in the rich, meaty smell of its contents. Unable to resist the delicious-looking pieces of roasted bone found inside, [npc.she]
		#IF(npc.getFaceType()==FACE_TYPE_innoxia_hyena_face)
			 [npc.verb(start)] using [npc.her] powerful hyena jaws to crunch each of them into pieces, and in a matter of moments [npc.has] completely devoured the entire bag.
		#ELSE
			 [npc.verb(start)] eagerly sucking the delicious marrow out of each of them, and in a matter of moments [npc.has] completely devoured the entire bag.
		#ENDIF
		]]></selfUse>
		<otherUse><![CDATA[
		[npc.Name] [npc.verb(open)] the top of the brown paper bag and [npc.verb(hold)] it out to [npc2.name], allowing [npc2.herHim] to breathe in the rich, meaty smell of its contents. Unable to resist the delicious-looking pieces of roasted bone found inside, [npc2.she]
		#IF(npc.getFaceType()==FACE_TYPE_innoxia_hyena_face)
			 [npc2.verb(start)] using [npc2.her] powerful hyena jaws to crunch each of them into pieces, and in a matter of moments [npc2.has] completely devoured the entire bag.
		#ELSE
			 [npc2.verb(start)] eagerly sucking the delicious marrow out of each of them, and in a matter of moments [npc2.has] completely devoured the entire bag.
		#ENDIF
		]]></otherUse>
	</useDescriptions>

	
</item>
