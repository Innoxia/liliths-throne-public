<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- For a version with comments, see "res/mods/innoxia/items/clothing/template/socks.xml". -->
<clothing>
	<coreAttributes>
		<value>150</value> 
		<determiner><![CDATA[a]]></determiner>
		<name><![CDATA[T-shirt]]></name>
		<namePlural pluralByDefault="false"><![CDATA[T-shirts]]></namePlural> 
		<description><![CDATA[A feminine-cut T-shirt. It bears the words: ]]></description> 
		<physicalResistance>0</physicalResistance>
		<femininity>ANDROGYNOUS</femininity>
		<slot>TORSO_UNDER</slot>
		<rarity>UNCOMMON</rarity>
		<clothingSet/>
		<imageName>rental_mommy.svg</imageName>
		<imageEquippedName/>
		
		<!-- 'Stickers' are additional svgs which can be overlaid on top of (or beneath the) base svg image.
		Definitions are all within the 'stickers' element. -->
		<stickers>
			<category id="top_txt" priority="1"> <!-- All stickers defined within this category are *mutually exclusive with one another, but not with stickers defined in other 'category' elements*.
			The 'id' should be unique to each category, and can be defined as whatever you want, but for formatting purposes, it would be preferable for it to just contain basic alpha-numerical values and underscores.
			The 'priority' variable determines the position of this category in UI rendering order (in the inventory's clothing dye screen), with lower values being rendered nearer to the top of the category list.-->
				<categoryName><![CDATA[Top Text]]></categoryName> <!-- This is used in-game as the title for this sticker category in the sticker application menu UI. As such, please try to make this human-readable. -->
				<sticker id="rental" priority="1" defaultSticker="true" zLayer="1" colourDisabled="" colourSelected=""> <!-- A sticker element.
				The 'id' element should be unique to stickers within this category element.
				The 'priority' variable determines the position of this sticker in UI rendering order (in the inventory's clothing dye screen), with lower values being rendered nearer to the left of the buttons list.
				'defaultSticker' defines whether this sticker is applied to this clothing item by default when spawned in. If multiple stickers in one category are defined as being default, then one is chosen at random when an instance of this clothing is spawned.
				'zLayer' defines the rendering z-layer priority. These 'zLayer' values are compared against one another when rendering, with higher values being drawn on top of stickers with lower values. *The base svg has a zLayer value of 0*, meaning that negative values will be drawn beneath the base svg. Defining zLayer as 0 is not advised (although it is handled by always being drawn on top of the base layer).
				'colourDisabled' and 'colourSelected' are optional variables which you can use to define the colour of the text within the button used to select this sticker in the clothing dye UI. You can leave these blank or delete them entirely to use default button colours. The default values, if you were to define them using these variables, would look like:
				colourDisabled="TEXT_GREY" colourSelected="GENERIC_GOOD"
				(Note: If you do not define an 'imageName' variable, or if you leave it blank, the default selected colour will be TEXT_GREY instead of GENERIC_GOOD.)
				Available colours can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours/PresetColour.java
				You can also define custom colours instead of a PresetColour id, in which case you *must* use a standard RGB hex code as the value.
				e.g. colourDisabled="777777" colourSelected="57DB7E"-->
					<stickerName><![CDATA[Rental]]></stickerName> <!-- This is used in-game as the title for this sticker's button in the sticker application menu UI. As such, please try to make this human-readable. -->
					<namePrefix priority="1"><![CDATA[Rental]]></namePrefix> <!-- Define a 'namePrefix' to add a prefix to the base clothing's name when this sticker is applied.
					The 'priority' variable defines the order in which multiple sticker 'namePrefix's are displayed. A *lower value* means they will be *displayed first*. This can be left undefined. -->
					<namePostfix/> <!-- Exactly the same as 'namePrefix', but the text is appended after the base clothing name. -->
					<descriptionModification fullReplacement="false" priority="1"><![CDATA[<i>Rental </i>]]></descriptionModification> <!-- You can set whether this sticker should define a new description for the clothing.
					If 'fullReplacement' is true, then the clothing's description is completely replaced with 'descriptionModification' while this sticker is applied. If 'fullReplacement' is false, then it is appended to the base clothing description (so long as another sticker has not applied a 'fullReplacement').
					The 'priority' element defines in what order the description appending is performed, or, if 'fullReplacement' is true for multiple active stickers, which sticker's description has priority. -->
					<imageName zLayer="1" slot="TORSO_UNDER">text_rental.svg</imageName> <!-- The path name for this sticker, which should be in the same folder location as this xml file.
					The 'slot' variable can be omitted, in which case the default slot for the clothing item is used.
					If the clothing can be equipped into multiple slots, you don't *need* to define an 'imageName' element for every slot, but if you don't, the game will end up using any of your defined 'imageName's at random (which is not a problem if you only define one 'imageName' that's suitable for any of the clothing's base imageName).
					The 'zLayer' attribute defines the rendering order for this svg image. You do not need to define this attribute, as if it is missing, this svg will use the sticker's 'zLayer' attribute which you've already defined up above in the root 'sticker' element. I have included it here just as an example. -->
					<!-- Note: You can add as many 'imageName' elements as you like. -->
					<itemTagsAdded/> <!-- If this sticker should add any ItemTags to the clothing, then you can define them in here. Use <tag> elements within the 'itemTagsAdded' element (e.g. <tag>SOLD_BY_NYAN</tag>)using ItemTag names as defined here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/ItemTag.java -->
					<itemTagsRemoved/> <!-- If this sticker should remove any ItemTags to the clothing, then you can define them in here. Use <tag> elements in the same manner as 'itemTagsAdded'. (Warning: If you define either a single sticker or multiple stickers to have conflicting tag behaviour (i.e. both adding and removing identical tags), then behaviour is undefined and you will end up with the ItemTag applied or removed at random.) -->
					<unavailabilityText/> <!-- Sticker are available to be used by the player by default, but if you want there to be requirements for using this sticker, then define this element as a CDATA text element, with any non-whitespace text returned signalling to the game that this sticker is unavailable. The returned text will be displayed to the player in the button's tooltip, so it should describe why this sticker is unavailable.
					You can define a 'showDisabledButton' attribute, which by default is set to true, and which defines whether or not this sticker's selection button is shown to the player when disabled.
					Please note that no 'npc' tag can be used, as this clothing might not belong to anyone.
					
					An example where the player could only use the sticker while being feminine would be:
					<unavailabilityText showDisabledButton="true"><![CDATA[
						#IF(!pc.isFeminine())
							Only feminine characters can apply this sticker!
						#ENDIF
					]]></unavailabilityText>
					
					And for this example, the disabled button is not shown to the player, so there's no need for an elaborate description, as the player will never see it:
					<unavailabilityText showDisabledButton="false"><![CDATA[
						#IF(pc.getSubspeciesOverrideRace()!=RACE_DEMON && !pc.isFeminine())
							unavailable
						#ENDIF
					]]></unavailabilityText>
					-->
					<availabilityText/> <!-- The counterpart to 'unavailabilityText', this text is shown when 'unavailabilityText' is returning an empty String, and therefore this sticker is available. Use a CDATA text element.
					Counterpart examples to the two above:
					<availabilityText><![CDATA[
						You have unlocked this sticker due to being feminine!
					]]></availabilityText>
					
					<availabilityText><![CDATA[
						#IF(pc.getSubspeciesOverrideRace()==RACE_DEMON)
							You have unlocked this sticker due to being a demon!
						#ELSE
							You have unlocked this sticker due to being feminine!
						#ENDIF
					]]></availabilityText>
					-->
				</sticker>
				<sticker id="dommy" priority="2" defaultSticker="false" zLayer="1"> <!-- This sticker is mutually exclusive with the one above, as it is defined within the same 'category' element. -->
					<stickerName><![CDATA[Dommy]]></stickerName>
					<namePrefix priority="1"><![CDATA[Dommy]]></namePrefix>
					<namePostfix/>
					<descriptionModification fullReplacement="false" priority="1"><![CDATA[<i>Dommy </i>]]></descriptionModification>
					<imageName>text_dommy.svg</imageName>
					<itemTagsAdded/>
					<itemTagsRemoved/>
					<unavailabilityText/>
					<availabilityText/>
				</sticker>
			</category>
			<category id="btm_txt" priority="2"> <!-- A new category, meaning that these stickers can be used in conjunction with one of the two defined above. -->
				<categoryName><![CDATA[Bottom Text]]></categoryName>
				<sticker id="mommy" priority="1" defaultSticker="true" zLayer="1">
					<stickerName><![CDATA[Mommy]]></stickerName>
					<namePrefix priority="2"><![CDATA[Mommy]]></namePrefix>
					<namePostfix/>
					<descriptionModification fullReplacement="false" priority="2"><![CDATA[<i>Mommy</i>]]></descriptionModification>
					<imageName>text_mommy.svg</imageName>
					<itemTagsAdded/>
					<itemTagsRemoved/>
					<unavailabilityText/>
					<availabilityText/>
				</sticker>
				<sticker id="daddy" priority="2" defaultSticker="false" zLayer="1">
					<stickerName><![CDATA[Daddy]]></stickerName>
					<namePrefix priority="2"><![CDATA[Daddy]]></namePrefix>
					<namePostfix/>
					<descriptionModification fullReplacement="false" priority="2"><![CDATA[<i>Daddy</i>]]></descriptionModification>
					<imageName>text_daddy.svg</imageName>
					<itemTagsAdded/>
					<itemTagsRemoved/>
					<unavailabilityText/>
					<availabilityText/>
				</sticker>
				<!-- I haven't defined a 'None' sticker for this category, meaning that either the 'Mommy' or 'Daddy' sticker will always be displayed. -->
			</category>
			<category id="price" priority="3">
				<categoryName><![CDATA[Price]]></categoryName>
				<sticker id="50" priority="1" defaultSticker="true" zLayer="1"> <!-- The 'defaultSticker' variable is set to true, meaning that this clothing will spawn in with it applied, but if it were false, this sticker slot would be unused (which is available due to the 'allowsNone="true"' definition in the 'category' element above).-->
					<stickerName><![CDATA[50]]></stickerName>
					<namePrefix/>
					<namePostfix/>
					<descriptionModification fullReplacement="false" priority="3"><![CDATA[, <i>[style.moneyFormatNoColour(50, span)]</i>]]></descriptionModification>
					<imageName>text_flames_50.svg</imageName>
					<itemTagsAdded/>
					<itemTagsRemoved/>
					<unavailabilityText/>
					<availabilityText/>
				</sticker>
				<sticker id="none" priority="0" defaultSticker="false" zLayer="1"> <!-- This has a priority of 0, so even though I've put it last in this sticker element list, it will be rendered first in the game's button UI. -->
					<stickerName><![CDATA[None]]></stickerName>
					<namePrefix/>
					<namePostfix/>
					<descriptionModification/>
					<imageName/>
					<itemTagsAdded/>
					<itemTagsRemoved/>
					<unavailabilityText/>
					<availabilityText/>
				</sticker>
			</category>
		</stickers>
		
		<enchantmentLimit/>
		
		<effects> 
              <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="DAMAGE_LUST" timer="0"/>
              <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="DAMAGE_LUST" timer="0"/>
              <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="FERTILITY" timer="0"/>
              <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="FERTILITY" timer="0"/>
              <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="TF_MOD_FETISH_BEHAVIOUR" secondaryModifier="TF_MOD_FETISH_PREGNANCY" timer="0"/>
		</effects>
		
		<blockedPartsList>
			<blockedParts>
				<displacementType>REMOVE_OR_EQUIP</displacementType>
				<clothingAccessRequired> 
					<clothingAccess>ARMS_UP_TO_SHOULDER</clothingAccess>
					<clothingAccess>HEAD</clothingAccess>
				</clothingAccessRequired>
				<blockedBodyParts/>
				<clothingAccessBlocked/>
				<concealedSlots/>
			</blockedParts>
			
			<blockedParts>
				<displacementType>PULLS_UP</displacementType>
				<clothingAccessRequired/>
				<blockedBodyParts>
					<bodyPart>BREASTS</bodyPart>
					<bodyPart>NIPPLES</bodyPart>
					<bodyPart>STOMACH</bodyPart>
					<bodyPart>BACK</bodyPart>
				</blockedBodyParts>
				<clothingAccessBlocked>
					<clothingAccess>CHEST</clothingAccess>
					<clothingAccess>WAIST</clothingAccess>
				</clothingAccessBlocked>
				<concealedSlots>
					<slot>CHEST</slot>
					<slot>NIPPLE</slot>
					<slot>STOMACH</slot>
					<slot>PIERCING_STOMACH</slot>
					<slot>PIERCING_NIPPLE</slot>
				</concealedSlots>
			</blockedParts>
		</blockedPartsList>
		
		<incompatibleSlots/>
		
		<primaryColours values="JUST_WHITE"/> 
		<primaryColoursDye values="ALL"/>
		<secondaryColours values="JUST_BLACK"/>
		<secondaryColoursDye values="ALL"/>
		<tertiaryColours values="JUST_WHITE"/>
		<tertiaryColoursDye>
			<colour>CLOTHING_WHITE</colour>
			<colour>CLOTHING_BLACK</colour>
			<colour>CLOTHING_GREY</colour>
			<colour>CLOTHING_RED</colour>
			<colour>CLOTHING_RED_BRIGHT</colour>
			<colour>CLOTHING_RED_DARK</colour>
			<colour>CLOTHING_ORANGE</colour>
			<colour>CLOTHING_ORANGE_BRIGHT</colour>
			<colour>CLOTHING_ORANGE_DARK</colour>
			<colour>CLOTHING_BROWN</colour>
			<colour>CLOTHING_TAN</colour>
			<colour>CLOTHING_YELLOW</colour>
			<colour>CLOTHING_GREEN_LIME</colour>
			<colour>CLOTHING_GREEN</colour>
			<colour>CLOTHING_GREEN_DARK</colour>
			<colour>CLOTHING_TURQUOISE</colour>
			<colour>CLOTHING_BLUE_LIGHT</colour>
			<colour>CLOTHING_BLUE</colour>
			<colour>CLOTHING_BLUE_DARK</colour>
			<colour>CLOTHING_PURPLE</colour>
			<colour>CLOTHING_PURPLE_DARK</colour>
			<colour>CLOTHING_PURPLE_LIGHT</colour>
			<colour>CLOTHING_PINK</colour>
			<colour>CLOTHING_PINK_LIGHT</colour>
		</tertiaryColoursDye>
		
		<itemTags> 
			<tag>SOLD_BY_NYAN</tag>
			<tag>FITS_ARM_WINGS</tag>
		</itemTags>
	</coreAttributes>

  <replacementText type="REMOVE_OR_EQUIP">
    <self>
      <![CDATA[[npc.Name] [npc.verb(guide)] [npc.her] [npc.arms] through the T-shirt's sleeves as [npc.she] [npc.verb(pull)] it down over [npc.her] head.]]>
    </self>
    <other>
      <![CDATA[[npc.Name] [npc.verb(guide)] [npc2.namePos] [npc2.arms] through the T-shirt's sleeves as [npc.she] [npc.verb(pull)] it down over [npc2.her] head.]]>
    </other>
    <otherRough>
      <![CDATA[[npc.Name] roughly [npc.verb(force)] [npc2.namePos] [npc2.arms] through the T-shirt's sleeves as [npc.she] [npc.verb(pull)] it down over [npc2.her] head.]]>
    </otherRough>
  </replacementText>

  <displacementText type="REMOVE_OR_EQUIP">
    <self>
      <![CDATA[[npc.Name] [npc.verb(pull)] off [npc.her] T-shirt.]]>
    </self>
    <other>
      <![CDATA[[npc.Name] [npc.verb(pull)] off [npc2.namePos] T-shirt.]]>
    </other>
    <otherRough>
      <![CDATA[[npc.Name] roughly [npc.verb(pull)] off [npc2.namePos] T-shirt.]]>
    </otherRough>
  </displacementText>
	
  <replacementText type="PULLS_UP">
    <self>
      <![CDATA[[npc.Name] [npc.verb(pull)] [npc.her] T-shirt back down, covering [npc.her] torso.]]>
    </self>
    <other>
      <![CDATA[[npc.Name] [npc.verb(pull)] [npc2.namePos] T-shirt back down, covering [npc2.her] torso.]]>
    </other>
    <otherRough>
      <![CDATA[[npc.Name] roughly [npc.verb(yank)] [npc2.namePos] T-shirt back down, covering [npc2.her] torso.]]>
    </otherRough>
  </replacementText>

  <displacementText type="PULLS_UP">
    <self>
      <![CDATA[[npc.Name] [npc.verb(pull)] [npc.her] T-shirt up to just below [npc.her] chin, fully exposing [npc.her] torso.]]>
    </self>
    <other>
      <![CDATA[[npc.Name] [npc.verb(pull)] [npc2.namePos] T-shirt up to just below [npc2.her] chin, fully exposing [npc2.her] torso.]]>
    </other>
    <otherRough>
      <![CDATA[[npc.Name] roughly [npc.verb(pull)] [npc2.namePos] T-shirt up to just below [npc2.her] chin, fully exposing [npc2.her] torso.]]>
    </otherRough>
  </displacementText>
	
</clothing>
