<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<placeType>
	
	<!-- The region which this map is associated with.
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/WorldRegion.java -->
	<worldRegion>FIELD_CITY</worldRegion>
	
	<!-- The name of this place type.
	Please note that all words within this value are automatically capitalised, due to the fact that it appears as header content.
		i.e. The game will save this value as 'Eastern Road'
	If you do not want this behaviour to be present, define the optional 'noCapitalisation' attribute as true, like so:
		<name noCapitalisation="true"><![CDATA[eastern road]]></name> -->
	<name><![CDATA[Eastern road]]></name>
	
	<!-- The information displayed to the player in the tooltip when hovering over this place type in the map UI. -->
	<tooltipDescription><![CDATA[This road leads out of the eastern gate of Elis, and after a few miles it links up with the well-maintained highway which runs alongside the river Hubur.]]></tooltipDescription>
	
	<!-- The description which is used when describing a character's virginity loss within this place type.
	It should follow the generic format of "in/at/on X", with no initial capitalisation or ending punctuation. -->
	<virginityLossDescription><![CDATA[on the eastern road leading out of Elis]]></virginityLossDescription>
	
	<!-- A reason why a character can't have sex in this location (only affects masturbation and sex with companions - sex scenes will still work if the dialogue allows for them).
	This supports conditional statements, with 'npc' being the character who is being checked to see if they are able to have sex (this will almost certainly always be the player).
	This overrides the parent world type's 'sexBlockedReason' value.
	If left blank, then characters can freely have sex in this place type.
	If omitted entirely, then the game will use the parent world type's value instead of this.
	Characters can have sex in this place type, so I've left it blank, but if you wanted to define a value, it would look like this:
		<sexBlockedReason><![CDATA[[npc.Name] cannot have sex here!]]></sexBlockedReason> -->
	<sexBlockedReason/>
	
	<!-- If the 'sexBlockedReason' above is omitted or left blank (thereby allowing sex to occur in this place type), then the game checks to see if there is a character in this tile who would block sex from taking place.
	If you define this value as 'false' instead of the default 'true', then the game will allow sex to take place even if a character is present.
	This should be used in tiles where there could be a character present in the tile but they aren't necessarily within sight of the player. -->
	<sexBlockedFromCharacterPresent>false</sexBlockedFromCharacterPresent>
	
	<!-- The file name of the svg image which should be used for this place type's icon.
	If you leave this blank, or omit it entirely, then the game will look for an svg file of the same name as this file within the same folder (i.e. 'entry_east.svg').
		Failing to find an svg image of that name, then this place type will not have an image associated with it.
	This can be useful for if there are several types of place type which all want to use the same svg, but you don't want to copy+paste the same svg and rename it for each place type.
	This place does not have an svg associated with it, but if you wanted to add one, then define it like so (*without* the '.svg' on the end):
		<svgName>your_file_name</svgName> -->
	<svgName/>
	
	<!-- The colour which the associated svg icon will be recoloured to.
	You can define this as either a PresetColour value or a raw colour hex.
	If defining a raw colour hex, use this format: <colour>#cafe69</colour>
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours/PresetColour.java -->
	<colour>BASE_GREY</colour>
	
	<!-- The background colour of this placeType's tile.
	You can define this as either a PresetColour value or a raw colour hex, although this should most often simply be left as 'MAP_BACKGROUND', which is the game's default value.
	Changing this colour for too many place types can end up with the map looking like a very odd mix of colours, and so in most cases it's best to leave any recolouring to the svg icon above.
	If defining a raw colour hex, use this format: <colour>#cafe69</colour>
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours/PresetColour.java -->
	<backgroundColour>MAP_BACKGROUND</backgroundColour>
	
	<!-- The id of the Encounter which can be triggered on this place type.
	You can omit this entirely or use the value 'null' if there is no associated Encounter.
	Please note that if a place type has multiple different 'encounterTypes' associated with it (via being set in the encounter file itself), one of those lists will be chosen at random to have an encounter drawn from it. -->
	<encounterType>null</encounterType>
	
	<!-- The id of the DialogueNode which is associated with this place type. -->
	<dialogue>innoxia_places_fields_elis_generic_entry_east</dialogue>
	
	<!-- Here you can define what's shown to the player in the 'characters present' UI at the top-right of the screen.
	Note: In order to save repeating yourself, you can define an optional attribute 'copyPlaceType' to copy the population of another place type.
		This is used for most of the population definitions I create, and looks something like this:
			<populationPresent copyPlaceType="innoxia_fields_elis_town_street"/>
	For another (non-commented) example, please look at the street.xml file. -->
	<populationPresent>
		<!-- You can define the times during which this population will be present using the following optional attributes (if none are defined, the population will be present all day):
			'startMinutes' defines the time of day, in minutes, after which this population will be present.
			'endMinutes' defines the time of day, in minutes, before which this population will be present.
			'inclusiveRange' defines whether or not the range encompassed by the 'startMinutes' and 'endMinutes' is the time during which the population is present (inclusiveRange="true") or absent (inclusiveRange="false"). If omitted, this will be true by default.
			'day' defines whether the population is present during daylight hours, and if defined will override the behaviour of the attributes above.
			'night' defines whether the population is present during non-daylight hours, and if defined will override the behaviour of the attributes above.
		Example:
			<population startMinutes="480" endMinutes="1320">
			This example will use the population between the times 08:00 - 22:00 (as 8 in the morning is 8*60=480 minutes and 10 at night is 22*60=1320 minutes).
		Note: You don't need to define both 'startMinutes' and 'endMinutes', as by defining just one the game will use the natural dawn/twilight time for the other value.
		Additional note: Both startMinutes and endMinutes are inclusive of the values defined when inclusiveRange=true, and exclusive when inclusiveRange=false, with the code's calculation being:
			If inclusiveRange=true: minutes>=startMinutes && minutes<=endMinutes
			If inclusiveRange=false: minutes<startMinutes || minutes>endMinutes
		For an example of this in use, please look at 'maps/fields/elis/shops/street.xml' -->
		<population day="true">
			<!-- The conditional statement which must return 'true', be left blank, or be omitted entirely for this population to be present.
			If you want to define a conditional, use this formatting:
				<conditional><![CDATA[true]]></conditional> -->
			<conditional/>
			<!-- The type of population, as defined here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/population/PopulationType.java 
			You do not have to use one of these pre-defined types, in which case just enter the name of your population instead of a value from PopulationType.java
				e.g.: <populationType plural="true">acrobats</populationType>
			It is preferable to use a pre-defined type, as in-game behaviour might sometimes change based on the type of population present.
				i.e. if the ENFORCER type is used, the game can know that there are Enforcers in the place type.
			The 'plural' attribute should be true if your population should be referred to in the plural case, or false if singular.
			The 'density' attribute should correspond to a population density from here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/population/PopulationDensity.java -->
			<populationType plural="false" density="OCCASIONAL">PERSON</populationType>
			<!-- You can define the subspecies present in one of two ways.
			The easiest way to do it is to define it as including all of the subspecies present in the parent world type, minus any which you define to be removed.
				This is how I've done it here in this example.
				I don't need to remove any subspecies from the list, but if you want to, then define it as so:
				<subspeciesPresent worldType="innoxia_fields_elis_town">
					<subspeciesToRemove>HUMAN</subspeciesToRemove>
				</subspeciesPresent>
			Alternatively, you can define it as a list of subspecies which are present, which is what I've done for the rest of the 'population' examples below. -->
			<subspeciesPresent worldType="innoxia_fields_elis_town"/>
		</population>
		<population day="true">
			<populationType plural="false" density="OCCASIONAL">CENTAUR_CARTS</populationType>
			<subspeciesPresent>
				<subspecies>CENTAUR</subspecies>
			</subspeciesPresent>
		</population>
	</populationPresent>
	
	<!-- Whether or not there is furniture present in this area.
	This value determines whether or not 'over-desk' and 'on chair' sex positions are available in this location, and overrides the 'furniturePresent' value defined in this place type's parent world type.
	You can omit this field entirely to use the default value defined in this place type's parent world type.
	Use either 'true' or 'false' as values. -->
	<furniturePresent>false</furniturePresent>
	
	<!-- Whether or not there are walls present in this area.
	This value determines whether or not the 'against wall' sex position is available in this location, and overrides the 'wallsPresent' value defined in this place type's parent world type.
	You can omit this field entirely to use the default value defined in this place type's parent world type.
	Use either 'true' or 'false' as values.
	You can add the optional attribute 'wallName' to change the name of what's acting as the wall in this place type (it will be used in the context 'Against X' and '... push her up against a nearby X.' where X is the value of the wallName attribute).
	If defined, the wallName will override the 'wallName' value defined in this place type's parent world type.
	The default name is 'wall'.
		e.g. <wallsPresent wallName="tree">true</wallsPresent> -->
	<wallsPresent>false</wallsPresent>
	
	<!-- Whether or not the player can loiter (pass time without encountering anything) in this place.
	This has priority over the parent world type's 'loiteringEnabled' value.
	You can omit this field entirely to use the default value defined in this place type's parent world type.
	Use either 'true' or 'false' as values. -->
	<loiteringEnabled>true</loiteringEnabled>
	
	<!-- Whether or not this place type is located on the world map - will usually be false unless you're planning on changing a world map's tile to this place type (via some kind of unique encounter).
	Use either 'true' or 'false' as values. -->
	<globalMapTile>false</globalMapTile>
	
	<!-- Whether or not this place type is considered to be dangerous.
	This supports a conditional statement as a place type's danger might change based on the player's in-game actions.
	Use either 'true' or 'false' as return values of whatever conditional statement you make. -->
	<dangerous><![CDATA[false]]></dangerous>
	
	<!-- Whether or not items dropped in this place type disappear when the player moves out of the tile.
	This supports a conditional statement as a place type's item removal behaviour might change based on the player's in-game actions.
	Use either 'true' or 'false'  as return values of whatever conditional statement you make. -->
	<itemsDisappear><![CDATA[true]]></itemsDisappear>
	
	<!-- The aquatic value of this place type, which determines whether land and/or water is present.
	This supports a conditional statement as a place type's aquatic value might change based on the player's in-game actions (such as flooding or draining an area).
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/places/Aquatic.java -->
	<aquatic><![CDATA[LAND]]></aquatic>
	
	<!-- The darkness value of this place type, which determines whether the player will suffer from a low visibility debuff status effect.
	This supports a conditional statement as a place type's darkness value might change based on the player's in-game actions (such as lighting up or removing a light source from an area).
	You can omit this field entirely to use the default value of 'DAYLIGHT'.
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/places/Darkness.java -->
	<darkness><![CDATA[ALWAYS_LIGHT]]></darkness>
	
	<!-- The teleport permissions which this place type supports.
	TeleportPermissions are also defined in WorldType, and the most limiting TeleportPermission of the two will be used.
	This should only really differ from the value defined in WorldType in special cases where a world allows teleporting, but not on some tiles (such as Lyssieth's palace in Submission).
	You can omit this field entirely to use the default value of 'BOTH'.
	You can find values here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/TeleportPermissions.java -->
	<teleportPermissions>BOTH</teleportPermissions>
	
	<!-- The types of Weather which this place type is immune to (i.e. does not confer any negative weather effects to the player).
	Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/Weather.java
	If you want this place type to be immune to all weather effects (such as for if this place type is in an indoor setting), then define this as: <weatherImmunities immuneToAll="true"/>
	As this place type has no weather immunity, it is left blank.
	You can define individual immunities as so:
	<weatherImmunities>
		<weather>RAIN</weather>
	</weatherImmunities>-->
	<weatherImmunities/>
	
	<!-- You can use this element to initialise the inventory of tiles created with this place type as their type.
	The 'inventory' target corresponds to the tile's inventory.
	An example of this in use (to set the tile's inventory as containing 5000 flames) would be:
		<applyInventoryInit><![CDATA[
			[#inventory.setMoney(5000)]
		]]></applyInventoryInit>-->
	<applyInventoryInit/>
	
</placeType>
